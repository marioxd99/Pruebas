#!/usr/bin/env python3
# pylint: disable= W1203, W0613, W0511, C0321,C0116 ,C0103,R0201,C0115,E1101

import sys
import os
import uuid
import glob
import Ice
Ice.loadSlice('icegauntlet.ice')
import IceGauntlet
import IceStorm

class RoomManagerSyncI(IceGauntlet.RoomManagerSync):
    def __init__(self, publisher, manager, manager_id):
        self._managers_ = {}
        self.publisher = publisher
        self.manager = manager
        self.manager_id = manager_id

    def hello(self, manager, managerId, current=None):
        if managerId in self._managers_:
            return
        self._managers_[managerId] = manager
        self.publisher.announce(self.manager, self.manager_id)

    def announce(self, manager, managerId, current=None):
        if managerId in self._managers_:
            return
        self._managers_[managerId] = manager
        print("Hola con ID:", managerId)
        rooms = manager.availableRooms()
        directory = "./mapas"
        room = ""
        for room in rooms:
            # Comprobar si tenemos el mapa localmente
            if os.path.isfile(os.path.join(directory, room)):
                continue
            room = room[8:]
            manager.getRoom(room)

    def newRoom(self, roomName, managerId, current=None):
        if managerId not in self._managers_:
            print("ManagerID no conocido")
            return
        room = self._managers_[managerId].getRoom(roomName)
        almacen = AlmacenMapas()
        nombre_mapa = almacen.saveMap(room)
        print("Mapa publicado: ",nombre_mapa)

    def removedRoom(self, roomName, current=None):
        almacen = AlmacenMapas()
        almacen.removeMap(roomName)
        print("Eliminado con exito!")


class AlmacenMapas:
    def saveMap(self, roomData):
        directory = "./mapas"
        #Extraer el nombre del fichero del mapa
        roomName = roomData.find("room")
        nombre = roomData[roomName+8:]
        nombre = nombre.replace("}","").replace("'","")
        nombre = nombre.replace('"',"")
        roomData = roomData.replace("'",'"')

        newMap = open(os.path.join(directory, nombre+".json"), "w")
        newMap.write(roomData)
        newMap.close()
        return nombre

    def getMap(self, roomName):
        directory = "./mapas"
        content_room = open(os.path.join(directory, roomName), "r")
        ficheroMapa = content_room.read()
        content_room.close()
        return ficheroMapa

    def removeMap(self, roomName):
        directory = "./mapas"
        if roomName in directory:
            os.remove(os.path.join(directory, roomName))
        else:
            return

    def getListMaps(self, proxy):
        mapas = glob.glob("./mapas/*")
        return mapas


class RoomManagerI(IceGauntlet.RoomManager):
    def __init__(self, broker, publisher, manager_id):
        self.communicator = broker
        self.publisher = publisher
        self.manager_id = manager_id

    def publish(self, token, roomData, current=None):
        # Obtener el proxy del Auth_Server
        content_variable = open("proxy.txt", "r")
        proxyServer = content_variable.readline()
        content_variable.close()
        proxyServer = proxyServer.replace('"', "")
        # Conectarse al Auth_Server
        proxy = self.communicator.stringToProxy(proxyServer)
        client = IceGauntlet.AuthenticationPrx.checkedCast(proxy)
        if client is None:
            sys.exit(1)
        valido = client.getOwner(token)
        existe = True
        #Extraer el nombre del fichero del mapa
        roomName = roomData.find("room")
        nombre = roomData[roomName+8:]
        nombre = nombre.replace("}","").replace("'","")
        roomData = roomData.replace("'",'"')
        if valido:
            try:
                directory = "./mapas"
                newMap = open(os.path.join(directory,nombre+".json"), "w")
                newMap.write(roomData)
                newMap.close()
            except Exception:
                print("No existe el mapa")
                existe = False
            if existe:
                print("Mapa publicado con exito")
                self.publisher.newRoom(nombre+".json", self.manager_id)
        else:
            print("El token no es valido")
    def remove(self, token, roomName, current=None):
        # Obtener el proxy del Auth_Server
        content_variable = open("proxy.txt", "r")
        proxyServer = content_variable.readline()
        content_variable.close()
        proxyServer = proxyServer.replace('"', "")

        proxy = self.communicator.stringToProxy(proxyServer)
        client = IceGauntlet.AuthenticationPrx.checkedCast(proxy)
        valido = client.getOwner(token)
        existe = True

        if valido:
            try:
                directory = "./mapas"
                os.remove(os.path.join(directory,roomName))
            except Exception:
                print("No existe el mapa")
                existe = False
            if existe:
                print("Mapa eliminado correctamente")
                self.publisher.removedRoom(roomName+".json")
        else:
            print("El token no es valido")

    def getRoom(self, roomName, current=None):
        directory = "./mapas"
        #room = random.choice(os.listdir(directory))
        content_room = open(os.path.join(directory, roomName), "r")
        ficheroMapa = content_room.read()
        content_room.close()
        print("Mapa devuelto: ", roomName)

        return ficheroMapa

    def availableRooms(self, current=None):
        mapas = glob.glob("./mapas/*")
        return mapas


class Server(Ice.Application):

    def get_topic_manager(self):
        key = 'IceStorm.TopicManager.Proxy'
        proxy = self.communicator().propertyToProxy(key)
        if proxy is None:
            return None
        return IceStorm.TopicManagerPrx.checkedCast(proxy)

    def run(self, argv):
        topic_mgr = self.get_topic_manager()
        broker = self.communicator()
        id_service = str(uuid.uuid4())
        adapter_room_manager_sync = broker.createObjectAdapter("RoomManager")
        adapter_room_manager_sync.activate()
        qos = {}
        topic_name = "RoomManagerSyncChannel"

        try:
            topic = topic_mgr.retrieve(topic_name)
        except IceStorm.NoSuchTopic:
            topic = topic_mgr.create(topic_name)

        proxy = topic.getPublisher()
        publisher = IceGauntlet.RoomManagerSyncPrx.uncheckedCast(proxy)
        servantService = RoomManagerI(broker, publisher, id_service)
        service = adapter_room_manager_sync.addWithUUID(servantService)
        service = IceGauntlet.RoomManagerPrx.checkedCast(service)

        servantSubscriber = RoomManagerSyncI(publisher, service, id_service)
        subscriber = adapter_room_manager_sync.addWithUUID(servantSubscriber)
        topic.subscribeAndGetPublisher(qos, subscriber)
        publisher.hello(service, id_service)

        adapter_mapas = broker.createObjectAdapter('MapasAdapter')
        proxyMapas = adapter_mapas.add(servantService, broker.stringToIdentity('Mapas'))

        print(proxy, flush = True)
        print(proxyMapas, flush = True)
        adapter_mapas.activate()
        self.shutdownOnInterrupt()
        broker.waitForShutdown()

        return 0


server = Server()
sys.exit(server.main(sys.argv))
